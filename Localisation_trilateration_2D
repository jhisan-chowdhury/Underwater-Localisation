import numpy as np
from scipy.optimize import minimize
import pyproj
import math

XYZ_A =  (0, 0)
XYZ_B = (0.6, -0.3)
XYZ_C = (2.22, 2.7)
XYZ_D = (2.1, 0.4)

x_A, y_A = XYZ_A [:2]
x_B, y_B = XYZ_B [:2]
x_C, y_C = XYZ_C [:2]

[d1, d2, d3] = [57.53503901321715, 56.559987664206446, 58.17742599355066]


A = np.array([
    [2 * (x_A - x_C), 2 * (y_A - y_C)],
    [2 * (x_B - x_C), 2 * (y_B - y_C)]
])

# Matrix P
P = np.array([
    [(x_A ** 2 - x_C ** 2) + (y_A ** 2 - y_C** 2)  - (d1 ** 2 - d3 ** 2)],
    [(x_B ** 2 - x_C ** 2) + (y_B ** 2 - y_C ** 2) - (d2 ** 2 - d3 ** 2)]
])

# Solve for the unknown location
theta = np.linalg.solve (A, P)

#theta, residuals, rank, s = np.linalg.lstsq(A, P, rcond=None)
x, y = theta.flatten()

# Output the results
print(f"Possible location: {x}, {y}")
